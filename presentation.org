#+TITLE: Generating Circumstances
#+AUTHOR: Zeeshan Lakhani
#+EMAIL: zlakhani@basho.com
#+DATE: 1-9-2015 (Codemash)
#+LANGUAGE: en
#+OPTIONS: H:1 num:nil toc:nil \n:nil @:t ::t |:t ^:{} _:{} *:t TeX:t LaTeX:t
#+STARTUP: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [presentation, bigger]
#+LATEX_HEADER: \setbeamertemplate{navigation symbols}{}
#+LaTeX_HEADER: \usemintedstyle{emacs}
#+LATEX_HEADER: \usepackage[utf8x]{inputenc}
#+BEAMER_THEME: Madrid
#+BEAMER_HEADER: \titlegraphic{\includegraphics[width=0.4\textwidth]{images/title}}
#+BEAMER_HEADER: \institute[]{Software Engineer at Basho Technologies,Inc | Founder/Organizer Papers We Love \\ @zeeshanlakhani}
#+COLUMNS: %45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt)

* What I Listened To
   :PROPERTIES:
   :END:
   #+ATTR_LATEX: :width \textwidth
   [[file:images/hungry.png]]
* #TDDDEADYO
   :PROPERTIES:
   :END:
   #+ATTR_LATEX: :width \textwidth
   [[file:images/tdd.png]][fn:1]
* In Papers
   :PROPERTIES:
   :END:
   #+ATTR_LATEX: :width \textwidth
   \begin{center}
    \includegraphics[scale=0.25]{images/papers}
   \end{center}
* In the Year 2000...
  #+BEGIN_QUOTE
  We have designed a simple domain-specific language of testable specifications
  which the tester uses to define expected properties of the functions under test.
  #+END_QUOTE

  #+BEGIN_QUOTE
  We have chosen to put distribution under the human tester's control, by
  defining a test data generation language…
  #+END_QUOTE

  #+BEGIN_QUOTE
  We have taken two relatively old ideas, namely specifications as oracles and
  random testing, and found ways to make them easily available …
  #+END_QUOTE
* Don't Write Tests[fn:2]
  - One Feature - O(n)
  - Pairs of Features - O(n2) - quadratic
  - Triples of Features - O(n3) - cubic
* Thinking in Specifications[fn:3]
  - A “roundtrip”, e.g encode/decode?
  - An existing implementation with similar behavior
  - A relationship between inputs/outputs?
  - A set of client interactions with a platform
* Sample Properties[fn:3]
  - Reversing a list twice should equal the original list.
  - Reversing and sorting a list should preserve its length.
  - Popping an element from a queue should reduce its size by one
* Defining Truth?[fn:4]
  - Invariant
*** ?SOMETIMES(N,Prop)

A property which tests Prop repeatedly N times, failing only if all of the
tests fail. In other words, the property passes if Prop sometimes passes. This
is used in situations where test outcomes are non-deterministic, to search for
test cases that consistently fail...

*** fails(Prop::property()) -> property()

A property which succeeds when its argument fails. Sometimes it is useful to
write down properties which do not hold (even though one might expect them to).
This can help prevent misconceptions.

* The Only Sure Thing in Computer Science
  - Everything is a tradeoff.[fn:15]
    - QC Tradeoffs: Duration | Assertion Power
* A Personal Story
   :PROPERTIES:
   :END:
   #+ATTR_LaTeX: :width \textwidth
   - ClojureWest 2014

   - John Hugues / Reid Draper

   \begin{center}
    \includegraphics[scale=0.25]{images/story}
   \end{center}
* #BEZERKER
  :PROPERTIES:
  :BEAMER_OPT: shrink
  :END:

  #+begin_src clojure
  ;; Release-Base and Release-Link are at the top of this file. This is
  ;; so Media-Link can correctly depend on Release-Link.
  (def Release-New
    (assoc Release-Base
      ;; TODO: This should probably be optional, but I really want csync to send it
      ;; so leaving it as required just for now.
      :slug c/Slug
      :name c/NonEmptyString
      :artists (s/both [c/Simple-Account-Link] c/NonEmptyCollection)
      ;; TODO: This should probably be optional, but I really want csync to send it
      ;; so leaving it as required just for now.
      :created-by c/Simple-Account-Link
      (s/optional-key :copyright) (s/maybe c/Localized-Map)
      :media (s/both [(s/either c/Simple-Track-Link c/Simple-Video-Link)]
                     c/NonEmptyCollection)
      (s/optional-key :purchase) c/Simple-Link
      (s/optional-key :label) c/Simple-Account-Link
      (s/optional-key :images) c/Images
      (s/optional-key :description) c/Localized-Map
      (s/optional-key :created-with) c/Simple-Account-Link
      (s/optional-key :uploaded-with) c/Simple-Account-Link
      (s/optional-key :hearted) s/Bool
      (s/optional-key :pro-id) s/Str
      (s/optional-key :pro-slug) s/Str))

  (def Release-Existing
    (assoc Release-Base
      :name c/NonEmptyString
      :slug c/Slug
      :prior-slugs [c/Slug]
      :created-at sc/ISO-Date-Time
      :created-by a/Account-Link
      :artists [a/Account-Link]
      :label (s/maybe a/Account-Link)
      :images c/Images
      :hearted s/Bool
      :copyright (s/maybe c/Localized-Map)
      :description c/Localized-Map
      :media [(s/either Track-Link Video-Link)]
      :sharing c/Simple-Link
      :total-hearts s/Int
      ;; :total-plays s/Int
      :created-with (s/maybe a/Account-Link)
      :uploaded-with (s/maybe a/Account-Link)
      :purchase (s/maybe c/Simple-Link)
      :pro-id (s/maybe s/Str)
      :pro-slug (s/maybe s/Str)
      ;; :license License-Link
      :hearted-by c/Simple-Link
      ;; :listened-to c/Simple-Link
      ))

  (def Playlist-Base
    {:name c/NonEmptyString
     (s/optional-key :tags) c/Tags
     (s/optional-key :duration-seconds) (s/maybe s/Int)})

  (def Playlist-Link
    (assoc Playlist-Base
      :url c/URL
      :created-by a/Account-Link
      :images c/Images
      :sharing c/Simple-Link
      :pro-id  (s/maybe s/Str)
      :pro-slug (s/maybe s/Str)
      ;; :total-hearts s/Int
      ;; :total-plays s/Int
      ))
  #+end_src
* #BEZERKER2
  :PROPERTIES:
  :BEAMER_ENV: fullframe
  :BEAMER_OPT: shrink
  :END:

  #+begin_src clojure
  (def Mix-Existing
    (assoc Mix-Base
      :slug c/Slug
      :prior-slugs [c/Slug]
      :created-at sc/ISO-Date-Time
      :created-by a/Account-Link
      :artists [a/Account-Link]
      :release (s/maybe Release-Link)
      :label (s/maybe a/Account-Link)
      :images c/Images
      :hearted s/Bool
      :copyright (s/maybe c/Localized-Map)
      ;; :license c/Simple-Link
      :description c/Localized-Map
      :source-tracks [{:track Track-Link
                       :start-time-seconds s/Int}]
      :sharing c/Simple-Link
      :total-hearts s/Int
      ;; :total-plays s/Int
      :purchase (s/maybe c/Simple-Link)
      :created-with (s/maybe a/Account-Link)
      :uploaded-with (s/maybe a/Account-Link)
      :recorded-date (s/maybe sc/ISO-Date-Time)
      :hearted-by c/Simple-Link
      ;; :listened-to c/Simple-Link
      ))
  #+end_src
* quickcheck in the wild
  - [[https://github.com/clojure/test.check][test.check (clojure)]]
  - [[https://hackage.haskell.org/package/QuickCheck][Quickcheck - Haskell]]
  - [[http://www.quviq.com/products/erlang-quickcheck/][Erlang Quickcheck (from QuviQ)]]
  - [[http://www.scalacheck.org/][ScalaCheck]]
  - [[http://jsverify.github.io/][JSVerify]]
  - [[https://github.com/fsharp/FsCheck][FsCheck (for .NET)]]
  - ...
* Specification - The Transpose of a Transposed Matrix is the Original Matrix
** (A^T)^T = A
  #+begin_src clojure
  (def transpose-of-transpose-prop
    (prop/for-all [m matrix-gen]
    (= m (transpose (transpose m)))))

  (quick-check 50 transpose-of-transpose-prop)

  ;; Results:
  {:result true, :num-tests 50, :seed 1405444353915}
  #+end_src
* matrix2
  :PROPERTIES:
  :BEAMER_ENV: fullframe
  :BEAMER_OPT: shrink
  :END:

  #+begin_src clojure
  (def matrix
    [[1 2]
     [3 4]])

  (transpose matrix)

  ;; Results:
  [[1 3]
   [2 4]]
  #+end_src
* matrix3
  :PROPERTIES:
  :BEAMER_ENV: fullframe
  :BEAMER_OPT: shrink
  :END:

  #+begin_src clojure
  (def matrix-gen
    (gen/such-that
     not-empty
     (gen/vector
      (gen/tuple gen/int gen/int gen/int))))

  (gen/sample matrix-gen 10)

  ;; Results:
  ([[0 0 1]]
   [[0 -1 0]]
   [[0 2 1] [0 1 -2]]
   [[1 0 1] [0 1 -3] [0 4 2] [2 -3 4]]
   [[-3 5 -4] [3 -3 -2] [-2 3 -2] [-3 -5 -3] [0 -3 -1]]
   [[2 -5 -3] [-4 -3 5] [-4 -3 -4] [-4 4 3]]
   [[-4 4 5] [-4 2 0] [5 -6 0] [2 -3 5] [-6 -3 -5]]
   [[-5 2 -3] [-2 -2 5]]
   [[-1 3 -5] [5 -3 -2] [7 4 -7] [7 -3 -2] [1 -3 8]]
   [[-5 -3 -3] [2 7 -3]])
#+end_src
* gen/fmap
  *gen/fmap* allows us to create a new generator by applying a function to the
  values generated by another generator[fn:5]

  #+begin_src clojure
  (def gen1
    (gen/fmap (fn [n] (* n 2)) gen/nat))

  (gen/sample gen1)

  ;; Results
  (0 2 4 2 0 10 10 6 8 8)
  #+end_src
* gen/bind
  *gen/bind* allows us to create a new generator based on the value of a
  previously created generator[fn:5]

  - Generator a -> (a -> Generator b) -> Generator b

  #+begin_src clojure
  (def gen2
    (gen/bind gen1 (fn [v]
                   (gen/hash-map :codemash
                                 (gen/return v)))
  (gen/sample gen2)

  ;; Results
  ({:codemash 0} {:codemash 2} {:codemash 0}
   {:codemash 4} {:codemash 6} {:codemash 10}
   {:codemash 2} {:codemash 14} {:codemash 12}
   {:codemash 16})
  #+end_src
* seed
  Running Against the Same Set of Test Cases

  #+begin_src clojure
  (def prop-correct
    (prop/for-all [v gen1]
                  (> 100 v)))

  (tc/quick-check 100 prop-correct :seed 1420668333773)
  #+end_src
* Shrinking[fn:6]
  Shrink trees are *lazily* generated for each generated result value

  \begin{center}
   \includegraphics[scale=0.3]{images/flattened_joined_shrink}
  \end{center}

  -----

  Remember our property *(> 100 v)*?

  #+begin_src clojure
  {:result false, :seed 1420668333773, :failing-size 63,
   :num-tests 64, fail [108],
   :shrunk {:total-nodes-visited 17, :depth 2,
            :result false,
   :smallest [100]}}
  #+end_src
* schema->gen[fn:7] for reasons
  - Turn types, generics, schemas into generated data.
  - My use-case: Prismatic Schema[fn:8][fn:9]
  - Work with Properties Testing API Workflow
  - Regression Testing Out of the Box
* schema->gen1
  :PROPERTIES:
  :BEAMER_ENV: fullframe
  :BEAMER_OPT: shrink
  :END:

  #+begin_src clojure
  (def s-vector
    [(s/one s/Bool "first")
     (s/one s/Num "second")
     (s/one #"[a-z0-9]" "third")
     (s/optional s/Keyword "maybe")
     s/Int])

  ;; (true 3.0 "r"
  ;; :_1:r98l:Y!:npG-*:ZLyx4*+?:+I7:yO8577B5D:392_:!1-+2:8-aMu7
  ;; 1 7 3 -4)

  (def s-hashmap-with-hashmap
    {:foo s/Int
     :baz s/Str
     :bar {:foo s/Int}
     :far {(s/optional-key :bah) s/Bool}
     s/Keyword s/Num})

;; {:foo 0,
;;  :baz "%?I\"",
;;  :bar {:foo 9},
;;  :far {:bah false},
;;  :j 1.0,
;;  :O*37L:?K7+43:M?!?U_DIl*:GS90Ky**11 2.0}

  (s/check s-hashmap-with-hashmap datum)
  #+end_src
* A more realistic shrink
  - Trying to Model Recursive Data Types[fn:11]

  #+begin_src clojure
  {:foo -1.53125, :baz {:foo -3.0,
   :baz {:baz {:baz {:baz {:baz {:foo -1.1891892}}}}}}}

  ;; :smallest [{:foo 0.0, :baz {:foo 0.0,
  ;;             :baz {:baz {:foo 0.0}}}}]
  #+end_src

* schema->gen3
  :PROPERTIES:
  :BEAMER_ENV: fullframe
  :BEAMER_OPT: shrink
  :END:
  *Multiple Dispatch*

  #+begin_src clojure
  (defmethod schema->gen* schema.core.One
    [e]
    (schema->gen (:schema e)))

  (defmethod schema->gen* schema.core.RequiredKey
    [e]
    (gen/return (:k e)))

  (defmethod schema->gen* schema.core.OptionalKey
    [e]
    (gen/return (:k e)))

  (defmethod schema->gen* schema.core.Maybe
    [e]
    (gen/one-of
     [(gen/return nil)
      (schema->gen (:schema e))]))
  #+end_src

* schema->gen4
  :PROPERTIES:
  :BEAMER_ENV: fullframe
  :BEAMER_OPT: shrink
  :END:
  *Composing Generators*

  #+begin_src clojure
  (defmethod schema->gen* clojure.lang.Sequential
    [e]
    (let [[ones [repeated]]
          (split-with #(instance? schema.core.One %) e)
          [required optional]
          (split-with (comp not :optional?) ones)]
      (g/apply-by
       (partial apply concat)
       (g/one-of
        (apply gen/tuple (map schema->gen required))
        (g/apply-by
         (partial apply concat)
         (apply gen/tuple
                (map schema->gen
                     (concat required optional)))
         (if repeated
           (gen/vector (schema->gen repeated))
           (gen/return [])))))))
  #+end_src
* Changing Gears
  \begin{center}
   \includegraphics[scale=0.3]{images/merkletree}
  \end{center}
* eqc_statem
  Model State Transitions (as a FSM) -> Assert Against Implementation[fn:10]

  \begin{center}
   \includegraphics[scale=0.25]{images/eqc_statem}
  \end{center}
* Side Effects
  - Requires knowledge about the *context* and its possible
    *histories*[fn:17]
  - *Symbolic values* are generated during test *generation*
    and *dynamic values* are computed during test *execution*
    - dynamic state is computed at runtime
  - *next_state* callback operates during both test *generation*
     and test *execution*
* Eqc_statem_code1
  :PROPERTIES:
  :BEAMER_ENV: fullframe
  :BEAMER_OPT: shrink
  :END:

  #+begin_src erlang
  %% ====================================================================
  %% Notes
  %% ====================================================================

  %% [1] Earle, Clara Benac, and Lars-Ake Fredlund."Testing Java with QuickCheck."

  %% This is a very basic eqc_statem test that I've updated a bit, dealing with
  %% adding|cons'ing to a list and making sure those added values are members of a
  %% list.

  %% ====================================================================
  %% Code
  %% ====================================================================

  -module(stateful_sm).
  -compile(export_all).

  -include_lib("eqc/include/eqc.hrl").
  -include_lib("eqc/include/eqc_statem.hrl").

  setup() ->
      io:format("Setup Components If Need Be.~n"),
      ok.

  cleanup() ->
      io:format("TearDown Components if Need Be.~n"),
      ok.

  test() ->
      test(100).

  test(N) ->
      setup(),
      try eqc:quickcheck(numtests(N, prop_codemash()))
      after
          cleanup()
      end.
  #+end_src
* eqc_statem_code2
  :PROPERTIES:
  :BEAMER_ENV: fullframe
  :BEAMER_OPT: shrink
  :END:

  #+begin_src erlang
  %% Initialize State
  initial_state() -> [].

  %% ------ Grouped operator: add
  %% @doc add_command - Command generator
  -spec add_command(S :: eqc_statem:symbolic_state()) ->
          eqc_gen:gen(eqc_statem:call()).
  add_command(S) ->
      {call, ?MODULE, add, [S, nat()]}.

  %% @doc add_pre - Precondition for add
  -spec add_pre(S :: eqc_statem:symbolic_state(),
                Args :: [term()]) -> boolean().
  add_pre(S, _Args) ->
      S /= undefined.

  %% @doc add_next - Next state function
  -spec add_next(S :: eqc_statem:symbolic_state(),
                 V :: eqc_statem:var(),
                 Args :: [term()]) -> eqc_statem:symbolic_state().
  add_next(S, _Value, [_, N]) ->
      [N|S].

  %% @doc add_post - Postcondition for add
  -spec add_post(S :: eqc_statem:dynamic_state(),
                 Args :: [term()], R :: term()) -> true | term().
  add_post(S, [_, N], Res) ->
      [N|S] =:= Res.

  %% @doc - Perform add action
  -spec add(list(), non_neg_integer()) -> list().
  add(AList, N) ->
      [N|AList].
  #+end_src
* eqc_statem_code3
  :PROPERTIES:
  :BEAMER_ENV: fullframe
  :BEAMER_OPT: shrink
  :END:

  #+begin_src erlang
  %% ------ Grouped operator: is_member
  %% @doc is_member_command - Command generator
  -spec is_member_command(S :: eqc_statem:symbolic_state()) ->
          eqc_gen:gen(eqc_statem:call()).
  is_member_command(S) ->
      {call, ?MODULE, is_member, [S, nat()]}.

  %% @doc is_member_pre - Precondition for is_member
  -spec is_member_pre(S :: eqc_statem:symbolic_state(),
                      Args :: [term()]) -> boolean().
  is_member_pre(S, _Args) ->
      S /= undefined.

  %% @doc is_member_next - Next state function
  -spec is_member_next(S :: eqc_statem:symbolic_state(),
                       V :: eqc_statem:var(),
                       Args :: [term()]) -> eqc_statem:symbolic_state().
  is_member_next(S, _Value, _Args) ->
      S.

  %% @doc is_member_post - Postcondition for is_member
  -spec is_member_post(S :: eqc_statem:dynamic_state(),
                       Args :: [term()], R :: term()) -> true | term().
  is_member_post(S, [_, N], Res) ->
      Res == lists:member(N, S).

  %% @doc - Perform is_member action
  -spec is_member(list(), non_neg_integer()) -> boolean().
  is_member(S, N) ->
      lists:member(N, S).
  #+end_src
* eqc_statem_code4
  :PROPERTIES:
  :BEAMER_ENV: fullframe
  :BEAMER_OPT: shrink
  :END:

  #+begin_src erlang
  %% ====================================================================
  %% Invariants
  %% ====================================================================

  -spec invariant(eqc_statem:dynamic_state()) -> boolean().
  invariant(S) when length(S) >= 0 ->
      true;
  invariant(S) when length(S) > 0 ->
      FirstNum = hd(S),
      is_number(FirstNum) andalso FirstNum >= 0;
  invariant(_) ->
      false.

  %% Property Test
  prop_codemash() ->
      ?FORALL(Cmds,commands(?MODULE),
              aggregate(command_names(Cmds),
                        begin
                        {H, S, Res} = run_commands(?MODULE, Cmds),
                        pretty_commands(?MODULE,
                                        Cmds,
                                        {H, S, Res},
                                        Res =:= ok)
                        end)).
  #+end_src
* eqc_statem_code5
  :PROPERTIES:
  :BEAMER_ENV: fullframe
  :BEAMER_OPT: shrink
  :END:

  #+begin_src erlang
  stateful_sm:test().

  %% Results:

  %% Licence for Basho reserved until
  %% {{2015,1,8},{16,15,57}}
  %% .........................
  %% .........................
  %% .........................
  %% .........................
  %% OK, passed 100 tests

  %% 51.6% {stateful_sm,is_member,2}
  %% 48.4% {stateful_sm,add,2}
  %% true
  #+end_src
* WIP: Modeling KV-YZ HashTree in Riak
  :PROPERTIES:
  :BEAMER_OPT: shrink
  :END:

  #+begin_src erlang
  %% ------ Grouped operator: start_yz_tree
  %% @doc start_yz_tree_command - Command generator
  -spec start_yz_tree_command(S :: eqc_statem:symbolic_state()) ->
          eqc_gen:gen(eqc_statem:call()).
  start_yz_tree_command(_S) ->
      {call, ?MODULE, start_yz_tree, []}.

  %% @doc start_yz_tree_pre - Precondition for generation
  -spec start_yz_tree_pre(S :: eqc_statem:symbolic_state()) -> boolean().
  start_yz_tree_pre(S) ->
      S#state.yz_idx_tree == undefined.

  %% --------------------------------------------------------------------

  -spec insert_kv_tree(sync|async, obj(), {ok, tree()}) -> ok.
  insert_kv_tree(Method, RObj, {ok, TreePid}) ->
      {Bucket, Key} = eqc_util:get_bkey_from_object(RObj),
      Items = [{void, {Bucket, Key}, RObj}],
      case Method of
          sync ->
              riak_kv_index_hashtree:insert(Items, [], TreePid);
          async ->
              riak_kv_index_hashtree:async_insert(Items, [], TreePid)
      end.
  #+end_src
* We Talking About Tests? Tests?
  - Automating Selenium Actions[fn:16]
  - Generating Models
  - Sample Data
  - Investigation
  - Assertions
* Going Further
  - Formal Specifications - Thinking for Programmers[fn:12]
  - Molly - Peter Alvaro[fn:13]
    - A system for automatically detecting errors in a
      program with a correctness spec, the program, and
      malevolent sentience as input
* Footnotes
[fn:1] http://bit.ly/1ALmSGC
[fn:2] John Hughes - http://bit.ly/1rDOGr3
[fn:3] the @seancribbs - http://bit.ly/1wZm0I6
[fn:4] Notes on Erlang QC - http://bit.ly/14CmDBF
[fn:5] test.check docs - http://bit.ly/1xWxQ9R
[fn:6] video - http://bit.ly/1zYwPwa
[fn:7] http://bit.ly/1tSakMP
[fn:8] http://bit.ly/1BTaPW4
[fn:9] another example - Herbert - http://bit.ly/1IxJs5V
[fn:10] @jtuple - http://bit.ly/1tOfzaR
[fn:11] http://bit.ly/1sc221b
[fn:12] http://bit.ly/1w5emM2
[fn:13] http://bit.ly/1obnZLJ
[fn:14] http://bit.ly/1xOvawp
[fn:15] http://bit.ly/1xP7uIg
[fn:16] Kemerling - Pivotal Tracker -  http://bit.ly/1w5sXHk
[fn:17] http://bit.ly/14CyorP
